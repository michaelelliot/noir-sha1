pub fn sha1<M>(input: [u8; M], input_len: u16) -> [u8; 20] {
    let mut h0: u32 = 0x67452301;
    let mut h1: u32 = 0xEFCDAB89;
    let mut h2: u32 = 0x98BADCFE;
    let mut h3: u32 = 0x10325476;
    let mut h4: u32 = 0xC3D2E1F0;

    let mut msg: [u8; 256] = [0; 256];
    for i in 0..M { msg[i] = input[i]; }
    msg[input_len] = 0x80;

    let msg_length_in_bits_as_be_bytes: [u8; 8] = u64_to_u8(input_len as u64 * 8);
    let mut rem: u16 = fast_div_mod_rem(input_len + 1, 64);
    rem = if rem <= 56 {
        56 as u16 - rem
    } else {
        56 as u16 + (64 as u16 - rem)
    };
    let msg_padding_end: u16 = input_len + 1 + rem;
    for i in 0..8 {
        msg[msg_padding_end+i as u16] = msg_length_in_bits_as_be_bytes[i];
    }

    let num_chunks: u16 = (msg_padding_end / 64) + 1;
    let num_chunks_max: Field = (M/64);
    for chunk_idx in 0..num_chunks_max {
        if chunk_idx as u16 < num_chunks as u16 {
            let start_idx = chunk_idx * 64;
            let mut chunk: [u8; 64] = [0; 64];
            for j in 0..64 {
                chunk[j] = msg[start_idx as Field + j as Field];
            }
            let mut w: [u32; 80] = [0; 80];
            for i in 0..16 {
                w[i] = bytes_to_u32([
                    chunk[ i * 4],
                    chunk[(i * 4) + 1],
                    chunk[(i * 4) + 2],
                    chunk[(i * 4) + 3]]);
            }
            for i in 16..80 {
                w[i] = left_rotate(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16], 1);
            }
            let (mut a, mut b, mut c, mut d, mut e) = (h0, h1, h2, h3, h4);
            for i in 0..80 {
                let (f, k) = if i as u16 < 20 {
                    ((b & c) | ((!b) & d), 0x5A827999)
                } else if i as u16 < 40 {
                    (b ^ c ^ d, 0x6ED9EBA1)
                } else if i as u16 < 60 {
                    ((b & c) | (b & d) | (c & d), 0x8F1BBCDC)
                } else {
                    (b ^ c ^ d, 0xCA62C1D6)
                };
                let temp: u32 = left_rotate(a, 5) + f + e + k + w[i];
                e = d;
                d = c;
                c = left_rotate(b, 30);
                b = a;
                a = temp;
            }
            h0 = h0 + a;
            h1 = h1 + b;
            h2 = h2 + c;
            h3 = h3 + d;
            h4 = h4 + e;
        }
    }
    let h0_bytes = u32_to_u8(h0);
    let h1_bytes = u32_to_u8(h1);
    let h2_bytes = u32_to_u8(h2);
    let h3_bytes = u32_to_u8(h3);
    let h4_bytes = u32_to_u8(h4);

    let mut result: [u8; 20] = [0; 20];
    for i in 0..4 { result[i]    = h0_bytes[i]; }
    for i in 0..4 { result[4+i]  = h1_bytes[i]; }
    for i in 0..4 { result[8+i]  = h2_bytes[i]; }
    for i in 0..4 { result[12+i] = h3_bytes[i]; }
    for i in 0..4 { result[16+i] = h4_bytes[i]; }
    result
}

fn left_rotate(n: u32, b: u32) -> u32 {
    (n << b) | (n >> (32 - b))
}

fn fast_div_mod(dividend: u16, divisor: u16) -> (u16, u16) {
    let quot: u16 = dividend / divisor;
    let rem: u16 = dividend - (divisor * quot);
    (quot, rem)
}

fn fast_div_mod_rem(dividend: u16, divisor: u16) -> u16 {
    if dividend == divisor { 0 }
    else if dividend < divisor { dividend }
    else {
        let quot: u16 = dividend / divisor;
        let rem: u16 = dividend - (divisor * quot);
        rem
    }
}

fn bytes_to_u32(bytes: [u8; 4]) -> u32 {
    bytes[0] as u32 << 24 | bytes[1] as u32 << 16 | bytes[2] as u32 << 8 | bytes[3] as u32
}

fn u32_to_u8(num: u32) -> [u8; 4] {
    let mut result: [u8; 4] = [0; 4];
    for i in 0..4 {
        result[i] = (num >> (24 - (i * 8))) as u8;
    }
    result
}

fn u64_to_u8(num: u64) -> [u8; 8] {
    let mut result: [u8; 8] = [0; 8];
    for i in 0..8 {
        result[i] = (num >> (56 - (i * 8))) as u8;
    }
    result
}

#[test]
fn test_sha1() {
    let test_sha1_msg_55_hash: [u8; 20] = [
        0x92,0xaa,0xa1,0x5c,0x32,0xb8,0xe7,0xa7,0xb8,0x43,
        0x7a,0x6e,0xc6,0x8a,0x85,0x2f,0xb6,0xce,0x3c,0xe9];
    let test_sha1_msg_55: [u8; 128] = [
        0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x62,0x62,0x62,0x62,0x62,0x62,
        0x62,0x62,0x62,0x62,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x64,0x64,
        0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,
        0x65,0x65,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];

    let test_sha1_msg_56_hash: [u8; 20] = [
        0xa8,0xce,0x08,0x8c,0x13,0x82,0x88,0x5e,0x73,0xcd,
        0x05,0x59,0x9b,0xb1,0x00,0x16,0x5c,0x4d,0x23,0x54];
    let test_sha1_msg_56: [u8; 128] = [
        0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x62,0x62,0x62,0x62,0x62,0x62,
        0x62,0x62,0x62,0x62,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x64,0x64,
        0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,
        0x65,0x65,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];

    let test_sha1_msg_57_hash: [u8; 20] = [0x7a,0x1b,0x5a,0xd7,0xb7,0x1a,0xaf,0x6a,0xde,0xe9,0x98,0x53,0x9a,0x56,0xdd,0x52,0xdf,0x49,0xac,0x8a];
    let test_sha1_msg_57: [u8; 128] = [
        0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x62,0x62,0x62,0x62,0x62,0x62,
        0x62,0x62,0x62,0x62,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x64,0x64,
        0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,
        0x65,0x65,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];

    let test_sha1_msg_60_hash: [u8; 20] = [
        0x08,0xa6,0xd0,0x71,0xfc,0x15,0xc3,0xe0,0x63,0xf3,
        0x73,0x5a,0x6e,0xab,0x58,0xed,0xf3,0xe9,0x74,0x13];
    let test_sha1_msg_60: [u8; 128] = [
        0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x62,0x62,0x62,0x62,0x62,0x62,
        0x62,0x62,0x62,0x62,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x64,0x64,
        0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,
        0x65,0x65,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];

    let test_sha1_msg_63_hash: [u8; 20] = [
        0x17,0x44,0xe3,0x66,0xb0,0x62,0x32,0x50,0xa5,0x9c,
        0x44,0x4b,0xd8,0x4a,0x49,0xcc,0xc2,0xf1,0xaa,0x8e];
    let test_sha1_msg_63: [u8; 128] = [
        0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x62,0x62,0x62,0x62,0x62,0x62,
        0x62,0x62,0x62,0x62,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x64,0x64,
        0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,
        0x65,0x65,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x31,0x32,0x33,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];

    let test_sha1_msg_64_hash: [u8; 20] = [
        0x39,0xb0,0xaa,0xf9,0x20,0x45,0x81,0x40,0xf1,0xac,
        0xc3,0xac,0x3c,0x11,0xae,0x11,0xf2,0x3f,0x82,0x30];
    let test_sha1_msg_64: [u8; 128] = [
        0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x62,0x62,0x62,0x62,0x62,0x62,
        0x62,0x62,0x62,0x62,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x64,0x64,
        0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,
        0x65,0x65,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x31,0x32,0x33,0x34,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];

    let test_sha1_msg_65_hash: [u8; 20] = [
        0xc5,0xb2,0x2c,0xd6,0x67,0xb1,0x88,0x08,0xc0,0x17,
        0xf4,0x06,0xbd,0xf6,0x78,0x7e,0x24,0xa7,0x4a,0xe7];
    let test_sha1_msg_65: [u8; 128] = [
        0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x62,0x62,0x62,0x62,0x62,0x62,
        0x62,0x62,0x62,0x62,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x64,0x64,
        0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,
        0x65,0x65,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x31,0x32,0x33,0x34,
        0x35,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];

    let hash = sha1(test_sha1_msg_60, 60);
    assert(hash == test_sha1_msg_60_hash);

    let hash = sha1(test_sha1_msg_63, 63);
    assert(hash == test_sha1_msg_63_hash);

    let hash = sha1(test_sha1_msg_64, 64);
    assert(hash == test_sha1_msg_64_hash);

    let hash = sha1(test_sha1_msg_65, 65);
    assert(hash == test_sha1_msg_65_hash);

    let hash = sha1(test_sha1_msg_55, 55);
    assert(hash == test_sha1_msg_55_hash);

    let hash = sha1(test_sha1_msg_56, 56);
    assert(hash == test_sha1_msg_56_hash);

    let hash = sha1(test_sha1_msg_57, 57);
    assert(hash == test_sha1_msg_57_hash);
}
